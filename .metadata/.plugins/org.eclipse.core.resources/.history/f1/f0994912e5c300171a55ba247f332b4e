package brand.automation;

import org.testng.annotations.Test;

import com.relevantcodes.extentreports.ExtentReports;
import com.relevantcodes.extentreports.ExtentTest;
import com.relevantcodes.extentreports.LogStatus;

import ru.yandex.qatools.ashot.AShot;
import ru.yandex.qatools.ashot.Screenshot;
import ru.yandex.qatools.ashot.shooting.ShootingStrategies;

import org.testng.Assert;
import org.testng.ITestResult;
import org.testng.SkipException;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeClass;

import java.io.File;
import java.io.IOException;
import java.net.URL;

import javax.imageio.ImageIO;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.Platform;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.remote.Augmenter;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;

public class PreferenceCenter {

  private WebDriver driver;
  ExtentReports extent;
  ExtentTest logger; 
  @BeforeClass
  public void setUp() throws Exception {
    DesiredCapabilities caps = new DesiredCapabilities();
    caps.setCapability("browser", "Chrome");
    caps.setCapability("browser_version", "62.0");
    caps.setCapability("os", "Windows");
    caps.setCapability("os_version", "7");
    caps.setCapability("resolution", "1024x768");

    // setup reports
    
    extent = new ExtentReports (System.getProperty("user.dir") +"/test-output/STMExtentReport.html", true);
    
    extent
    .addSystemInfo("Host Name", "SoftwareTestingMaterial")
    .addSystemInfo("Environment", "Automation Testing")
    .addSystemInfo("User Name", "Rajkumar SM");
    //loading the external xml file (i.e., extent-config.xml) which was placed under the base directory
    //You could find the xml file below. Create xml file in your project and copy past the code mentioned below
    extent.loadConfig(new File(System.getProperty("user.dir")+"/extent-config.xml"));
    
    driver = new RemoteWebDriver(
      new URL("https://zaqwsx1:zqybk75kc8SQJmSXFKvg@hub-cloud.browserstack.com/wd/hub"),
      caps
    );
  }

  @Test
  public void testSimple() throws Exception {
	  logger = extent.startTest("passTest");
	logger.log(LogStatus.INFO, "Browser started ");
    driver.get("http://www.puffs.com");
   
  
    Assert.assertTrue(true, "Page title is: " + driver.getTitle()); 
    
    logger.log(LogStatus.PASS, "Title verified");
   
    
    //ashot Library used on Browserstack
    
    Screenshot screenshot = new AShot().shootingStrategy(ShootingStrategies.viewportPasting(1000)).takeScreenshot(driver);
    ImageIO.write(screenshot.getImage(),"PNG",new File(System.getProperty("user.dir") +"/FullPageScreenshot.png"));

    String image= logger.addScreenCapture((System.getProperty("user.dir") +"/FullPageScreenshot.png"));
    logger.log(LogStatus.FAIL, "Title verification", image);



    
  }
  @Test
	public void failTest(){
		logger = extent.startTest("failTest");
		Assert.assertTrue(false);
		logger.log(LogStatus.PASS, "Test Case (failTest) Status is passed");
	}
	
	@Test
	public void skipTest(){
		logger = extent.startTest("skipTest");
		throw new SkipException("Skipping - This is not ready for testing ");
	}
	
	@AfterMethod
	public void getResult(ITestResult result){
		if(result.getStatus() == ITestResult.FAILURE){
			logger.log(LogStatus.FAIL, "Test Case Failed is "+result.getName());
			logger.log(LogStatus.FAIL, "Test Case Failed is "+result.getThrowable());
		}else if(result.getStatus() == ITestResult.SKIP){
			logger.log(LogStatus.SKIP, "Test Case Skipped is "+result.getName());
		}
		// ending test
		//endTest(logger) : It ends the current test and prepares to create HTML report
		extent.endTest(logger);
	}
	@AfterTest
	public void endReport(){
		// writing everything to document
		//flush() - to write or update test information to your report. 
              extent.flush();
              //Call close() at the very end of your session to clear all resources. 
              //If any of your test ended abruptly causing any side-affects (not all logs sent to ExtentReports, information missing), this method will ensure that the test is still appended to the report with a warning message.
              //You should call close() only once, at the very end (in @AfterSuite for example) as it closes the underlying stream. 
              //Once this method is called, calling any Extent method will throw an error.
              //close() - To close all the operation
              extent.close();
  }
  @AfterClass
  public void tearDown() throws Exception {
    driver.quit();
  }

}

